apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
  - name: test-dep
    eventSourceName: test-github-controller
    eventName: testController
  triggers:
  - template:
      name: github-workflow-trigger
      k8s:
        group: argoproj.io
        version: v1alpha1
        resource: workflows
        operation: create
        parameters:
        - src:
            dependencyName: test-dep
            dataKey: body
          dest: spec.arguments.parameters.0.value
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: github-workflow-
            spec:
              entrypoint: pipeline
              ttlStrategy:
                secondsAfterCompletion: 259200
              podGC:
                strategy: OnWorkflowSuccess
              arguments:
                parameters:
                - name: message
                  value: hello world
              volumes:
              - name: github-creds-vol
                secret:
                  secretName: github-creds
                  defaultMode: 0500
                  items:
                  - key: "{{workflow.parameters.message.repository.name}}"
                    path: id_rsa
              - name: gcloud-creds-gcr-vol
                secret:
                  secretName: gcloud-creds-gcr
                  defaultMode: 0500
                  items:
                  - key: gcloudServiceKey
                    path: service_key.json
              - name: ci-configmap
                path: /tmp/scripts/
                configMap:
                  name: "{{workflow.parameters.message.repository.name}}"
              templates:
              - name: pipeline
                steps:
                - - name: prepare-environment
                    template: prepare-environment
                    arguments:
                      parameters:
                      - name: message
                        value: "{{workflow.parameters.message}}"
                - - name: build-image
                    template: build-image
                    when: " ( {{steps.prepare-environment.outputs.parameters.event-name}} == 'tag' ) && 
                            ( {{steps.prepare-environment.outputs.parameters.branch}} == 'dev') "
                    arguments:
                      parameters:
                      - name: git-tag
                        value: "{{steps.prepare-environment.outputs.parameters.git-tag}}"
                      - name: branch
                        value: "{{steps.prepare-environment.outputs.parameters.branch}}"
                      - name: repo-name
                        value: "{{steps.prepare-environment.outputs.parameters.repo-name}}"
                      - name: git-ssh-url
                        value: "{{steps.prepare-environment.outputs.parameters.git-ssh-url}}"
                      artifacts:
                      - name: environment
                        from: "{{steps.prepare-environment.outputs.artifacts.environment}}"
                - - name: deploy-dev-qas
                    template: deploy-dev-qas
                    when: " ( {{steps.prepare-environment.outputs.parameters.event-name}} == 'tag' ) && 
                            ( {{steps.prepare-environment.outputs.parameters.branch}} != 'prod') "
                    arguments:
                      parameters:
                      - name: git-tag
                        value: "{{steps.prepare-environment.outputs.parameters.git-tag}}"
                      - name: branch
                        value: "{{steps.prepare-environment.outputs.parameters.branch}}"
                      - name: repo-name
                        value: "{{steps.prepare-environment.outputs.parameters.repo-name}}"
                      - name: git-ssh-url
                        value: "{{steps.prepare-environment.outputs.parameters.git-ssh-url}}"
                      artifacts:
                      - name: environment
                        from: "{{steps.prepare-environment.outputs.artifacts.environment}}"
                - - name: deploy-prod
                    template: deploy-prod
                    when: " ( {{steps.prepare-environment.outputs.parameters.event-name}} == 'tag' ) && 
                            ( {{steps.prepare-environment.outputs.parameters.branch}} == 'prod') "
                    arguments:
                      parameters:
                      - name: git-tag
                        value: "{{steps.prepare-environment.outputs.parameters.git-tag}}"
                      - name: branch
                        value: "{{steps.prepare-environment.outputs.parameters.branch}}"
                      - name: repo-name
                        value: "{{steps.prepare-environment.outputs.parameters.repo-name}}"
                      - name: git-ssh-url
                        value: "{{steps.prepare-environment.outputs.parameters.git-ssh-url}}"
                      artifacts:
                      - name: environment
                        from: "{{steps.prepare-environment.outputs.artifacts.environment}}"


              - name: prepare-environment
                serviceAccountName: argo-events-sa
                container:
                  image: stedolan/jq
                  command: [/bin/bash, -c]
                  args: 
                  - |
                    
                    export GIT_DATA=$(echo '{{inputs.parameters.message}}' | jq -r . )

                    cat <<EOF > /tmp/.env
                    export PROJECT_PATH_SLUG=$(echo $GIT_DATA | jq -r '.repository.html_url' | sed 's|https://github.com/||g; s|_|-|g; s|/|-|g;' | tr '[A-Z]' '[a-z]')
                    export TAG=$(echo $GIT_DATA | jq -r '.ref' | sed 's/[a-z-]//g')
                    export BRANCH=$(echo $GIT_DATA | jq -r '.ref' | sed 's/[\.0-9-]//g')
                    EOF

                    . /tmp/.env

                    cat <<EOF >> /tmp/.env
                    export REGISTRY=$CONTAINER_REGISTRY
                    export CONTAINER_RELEASE_IMAGE=$CONTAINER_REGISTRY/$GCLOUD_PROJECT_ID/$PROJECT_PATH_SLUG
                    export CONTAINER_RELEASE_IMAGE_TAG=$CONTAINER_REGISTRY/$GCLOUD_PROJECT_ID/$PROJECT_PATH_SLUG:$TAG
                    EOF

                    echo $GIT_DATA | jq -r '.ref_type' > /tmp/event-name
                    echo $GIT_DATA | jq -r '.repository.ssh_url' > /tmp/git-ssh-url
                    echo $TAG > /tmp/git-tag
                    echo $BRANCH > /tmp/branch
                    echo $GIT_DATA | jq -r '.repository.name' > /tmp/repo-name

                    cat /tmp/.env
                    cat /tmp/event-name
                    cat /tmp/git-ssh-url
                    cat /tmp/git-tag
                    cat /tmp/branch
                    cat /tmp/repo-name
                  envFrom:
                  - configMapRef:
                      name: ci-configmap
                inputs:
                  parameters:
                  - name: message
                outputs:
                  artifacts: 
                  - name: environment
                    path: /tmp/.env
                  parameters:
                  - name: event-name
                    valueFrom:
                      path: /tmp/event-name
                  - name: git-ssh-url
                    valueFrom:
                      path: /tmp/git-ssh-url
                  - name: git-tag
                    valueFrom:
                      path: /tmp/git-tag
                  - name: branch
                    valueFrom:
                      path: /tmp/branch
                  - name: repo-name
                    valueFrom:
                      path: /tmp/repo-name

              - name: build-image
                serviceAccountName: argo-events-sa
                container:
                  image: docker:19.03
                  resources:
                    limits:
                      cpu: 1500m
                      memory: 1024Mi
                    requests:
                      cpu: 1000m
                      memory: 1024Mi
                  workingDir: /workdir
                  command: [sh, -c]
                  args: 
                  - |
                    until docker ps; do sleep 3; done;
                    . /tmp/.env
                    echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin $REGISTRY
                    docker pull $CONTAINER_RELEASE_IMAGE-build:latest || true
                    docker pull $CONTAINER_RELEASE_IMAGE:latest || true
                    docker build --cache-from $CONTAINER_RELEASE_IMAGE-build:latest --target build -t $CONTAINER_RELEASE_IMAGE-build . || true
                    docker build --cache-from $CONTAINER_RELEASE_IMAGE:latest -t $CONTAINER_RELEASE_IMAGE_TAG .
                    docker push $CONTAINER_RELEASE_IMAGE:latest
                    docker push $CONTAINER_RELEASE_IMAGE_TAG 
                  env:
                  - name: DOCKER_TLS_CERTDIR
                    value: ""
                  - name: DOCKER_HOST
                    value: 127.0.0.1
                  - name: GCLOUD_SERVICE_KEY
                    valueFrom:
                      secretKeyRef:
                        name: gcloud-creds-gcr
                        key: gcloudServiceKey     
                sidecars:
                - name: dind
                  image: docker:19.03-dind
                  securityContext:
                    privileged: true
                  mirrorVolumeMounts: true
                  env:
                  - name: DOCKER_TLS_CERTDIR
                    value: ""
                inputs:
                  parameters:
                  - name: git-tag
                  - name: git-ssh-url
                  - name: repo-name
                  - name: branch
                  artifacts:
                  - name: environment
                    path: /tmp/.env
                  - name: repository
                    path: /workdir
                    git:
                      repo: "{{inputs.parameters.git-ssh-url}}"
                      revision: "{{inputs.parameters.branch}}-{{inputs.parameters.git-tag}}"
                      sshPrivateKeySecret:
                        name: github-creds
                        key: "{{inputs.parameters.repo-name}}"

              - name: deploy-dev-qas
                serviceAccountName: argo-events-sa
                inputs:
                  parameters:
                  - name: git-tag
                  - name: git-ssh-url
                  - name: branch
                  - name: repo-name
                  artifacts:
                  - name: environment
                    path: /tmp/.env
                container:
                  image: bitnami/git
                  resources:
                    limits:
                      cpu: 100m
                      memory: 128Mi
                    requests:
                      cpu: 100m
                      memory: 128Mi
                  workingDir: /workdir
                  command: [sh, -c]
                  args: 
                  - |
                    
                    . /tmp/.env
                    
                    git clone {{inputs.parameters.git-ssh-url}}
                    
                    git config --global user.email "devops@humanize.co.th"
                    git config --global user.name "Devops"
                    git checkout develop
                    sed -i "s|image:.*|image: $$CONTAINER_RELEASE_IMAGE_TAG |g" patch.yaml
                    
                    git add .
                    git commit -m "patch by {{workflow.name}}"
                    git push
                  envFrom:
                  - configMapRef:
                      name: ci-configmap
                  env:
                  - name: ssh
                    valueFrom:
                      secretKeyRef:
                        name: github-creds
                        key: "{{inputs.parameters.repo-name}}"

              - name: deploy-prod
                
                serviceAccountName: argo-events-sa
                inputs:
                  parameters:
                  - name: git-tag
                  - name: git-ssh-url
                  - name: branch
                  - name: repo-name
                  artifacts:
                  - name: environment
                    path: /tmp/.env
                  - name: repository
                    path: /workdir
                    git:
                      repo: "{{inputs.parameters.git-ssh-url}}"
                      revision: "{{inputs.parameters.branch}}-{{inputs.parameters.git-tag}}"
                      sshPrivateKeySecret:
                        name: github-creds
                        key: "{{inputs.parameters.repo-name}}"
                container:
                  image: google/cloud-sdk
                  resources:
                    limits:
                      cpu: 100m
                      memory: 128Mi
                    requests:
                      cpu: 100m
                      memory: 128Mi
                  workingDir: /workdir
                  command: [sh, -c]
                  args: 
                  - |
                    . /tmp/.env
                    cat <<EOF > service_key.json
                    $GCLOUD_SERVICE_KEY
                    EOF
                    gcloud auth activate-service-account --key-file=service_key.json
                    gcloud container clusters get-credentials $GCLOUD_CLUSTER --zone asia-southeast1-b --project $GCLOUD_PROJECT_ID
                    export DEPLOYMENT_NAME="$(kubectl get deploy -n $NAMESPACE-prod -l app=$APP_NAME | awk 'NR>1 { print $1 }')"
                    echo DEPLOYMENT_NAME: $DEPLOYMENT_NAME
                    export IMAGE=$CONTAINER_RELEASE_IMAGE_TAG
                    echo IMAGE: $IMAGE
                    export CONTAINER_NAME=$TARGET_CONTAINER
                    echo CONTAINER_NAME: $CONTAINER_NAME
                    sed -i "s|name:|name: $CONTAINER_NAME|g; s|image:|image: $IMAGE|g;" k8s/patch.yaml
                    kubectl patch deploy -n $STAGING_NAMESPACE $DEPLOYMENT_NAME -p "$(cat k8s/patch.yaml)"
                    ./patch.sh || true
                  envFrom:
                  - configMapRef:
                      name: ci-configmap
                  env:
                  - name: GCLOUD_SERVICE_KEY
                    valueFrom:
                      secretKeyRef:
                        name: gcloud-creds-gcr
                        key: gcloudServiceKey



            